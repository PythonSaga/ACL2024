{"task_id":"HumanEval/0", "prompt":"\nfrom typing import List\n\ndef extra_marks(marks:List[float])-> float:\n    \"\"\"let say i have a list of marks scored in each question by person. I want a sum of all the extra marks he/she scored in exam,\n    extra score is whatever he scored above 100 in each question.\n    but if marks is below 0 in any question it would reduce the total extra scores.\n    Take input from user and return the sum of extra marks.\n    Example:\n    Input: [100, 120, -30, 140, -50, -60, 170, 22,55,-20]\n    Output: -30\n    Input: [100, 120, -30]\n    Output: -10\n    Input: [100, 22,75,99]\n    Output: 0\n    \"\"\"\n", "entry_point": "extra_marks", "canonical_solution":"\nextra = 0\nfor mark in marks:\n    if mark > 100:\n        extra += mark - 100\n    elif mark < 0:\n        extra += mark\nreturn extra", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([100, 120, -30, 140, -50, -60, 170, 22,55,-20,-90]) == -120\n    assert candidate([111, 20, -130, 140, -50, -60, 170, 22,55,-20,-190]) == -329\n    assert candidate([170, 22,55,-20,-90]) == -40\n    assert candidate([100.1, 120, -30, 140, -50, -60, 170, 22,55,-20,-90]) == -119.9\n"}
{"task_id":"HumanEval/1", "prompt":"\nfrom typing import List\n\ndef split_big_bag(big_bag: List[int])->bool:\n    \"\"\"i have one big bag in which there are multiple small bags fill with sand. bag of each small bag is different from each other.\n        i want to split the big bad into 2 medium bags, such that avergae weight of each medium bag is same.\n        Take input from user and return True if it is possible to split the big bag into 2 medium bags, else return False.\n        Input: big_bag = [1,2,3,4,5,6,7,8]\n        Output: true\n        Input: big_bag = [3,1]\n        Output: false\"\"\"\n", "entry_point": "split_big_bag", "canonical_solution":"\ntotal_weight = sum(big_bag)\n# Check if the total weight is even\nif total_weight % 2 != 0:\n    return False\n\ntarget_weight = total_weight // 2\n\n# Create a 2D array to store whether it's possible to achieve a certain weight with the given bags\ndp = [[False] * (target_weight + 1) for _ in range(len(big_bag) + 1)]\n\n# Base case: If the target weight is 0, it's always possible (by not selecting any bag)\nfor i in range(len(big_bag) + 1):\n    dp[i][0] = True\n\nfor i in range(1, len(big_bag) + 1):\n    for j in range(1, target_weight + 1):\n        # If the current bag weight is greater than the target weight, skip it\n        if big_bag[i - 1] > j:\n            dp[i][j] = dp[i - 1][j]\n        else:\n            # Either include or exclude the current bag to achieve the target weight\n            dp[i][j] = dp[i - 1][j] or dp[i - 1][j - big_bag[i - 1]]\n\nreturn dp[len(big_bag)][target_weight]", "test": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([0]) == True\n    assert candidate([5,2,3]) == True\n    assert candidate([8]) == False\n    assert candidate([1 2 3 4 5 6]) == False"}
{"task_id":"HumanEval/2", "prompt":"\nfrom typing import List\n\ndef is_path_crossing(distances: List[int]) -> bool:\n    \"\"\"Check whether the path crosses itself or not.\n    Suppose you are standing at the origin (0,0), and you are given a list of 4 distances,\n    where each distance is a step in a direction (N, W, S, E).\n\n    Take input from the user and return True if your path crosses itself, else False.\n\n    Example:\n    Input: [2, 1, 1, 1]\n    Output: True\n    Input: [1, 2, 3, 4]\n    Output: False\n    Input: [1, 2, 1, 2]\n    Output: True\n    \"\"\"\n", "entry_point": "is_path_crossing", "canonical_solution":"\nif len(distances) < 4:\n    return False\n\n# Initialize the starting point and direction\nx, y = 0, 0\ndirections = [(0, 1), (-1, 0), (0, -1), (1, 0)]  # N, W, S, E\nvisited = {(0, 0)}\n\nfor i in range(len(distances)):\n    # Calculate the new position based on the current direction\n    x += distances[i] * directions[i % 4][0]\n    y += distances[i] * directions[i % 4][1]\n\n    # Check if the new position has been visited before\n    if (x, y) in visited:\n        return True\n\n    # Add the current position to the visited set\n    visited.add((x, y))\n\nreturn False", "test": "\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == False\n    assert candidate([1, 2, 1, 2]) == True\n    assert candidate([2, 1, 1, 1]) == True\n    assert candidate([11, 0, 1, 3]) == True"}
{"task_id":"HumanEval/3", "prompt":"\nfrom typing import List\n\ndef is_boomarang(points: List[List[int]]) -> bool:\n    \"\"\"Check if the 3 points form a boomerang.\n    A boomerang is a set of 3 points that are all distinct and not in a straight line.\n\n    Take input from the user and return True if the 3 points are a boomerang and False if not.\n\n    Input: [[1,1],[2,3],[3,2]]\n    Output: True\n    Input: [[1,1],[2,2],[3,3]]\n    Output: False\n    \"\"\"\n    # Your implementation here\n    pass", "entry_point": "is_boomarang", "canonical_solution":"\n# Ensure there are exactly 3 points\nif len(points) != 3:\n    return False\n\n# Extract coordinates of the three points\nx1, y1 = points[0]\nx2, y2 = points[1]\nx3, y3 = points[2]\n\n# Check if the points are distinct\nif (x1, y1) == (x2, y2) or (x1, y1) == (x3, y3) or (x2, y2) == (x3, y3):\n    return False\n\n# Check if the points are not in a straight line\nif (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) != 0:\n    return True\n\nreturn False", "test": "\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[1, 1], [2, 3], [3, 2]]) == True\n    assert candidate([[1, 1], [2, 2], [3, 3]]) == False\n    assert candidate([[-1, -1], [0, 0], [1, 1]]) == False\n    assert candidate([[0, 0], [1, 2], [3, 4]]) == True\n    assert candidate([[0, 0], [1, 2]]) == False"}
{"task_id":"HumanEval/4", "prompt":"\nfrom typing import List\n\ndef max_square_area(coordinates: List[List[int]]) -> int:\n    \"\"\"Find the maximum area of a square that can be formed from the given coordinates.\n    The square has all sides equal and each side is parallel to the x or y axis with a length of at least 1 unit.\n\n    Take input from the user and return the maximum area of the square that can be formed from these coordinates.\n\n    Example:\n    INPUT: [[1,1],[1,3],[3,1],[3,3],[2,2]]\n    Output: 4\n    INPUT: [[1,1],[1,3],[3,1],[4,1],[4,4]]\n    Output: 0\n    \"\"\"\n", "entry_point": "max_square_area", "canonical_solution":"", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1,1],[1,3],[4,1],[4,5],[5,3]]) == 4\n    assert candidate([[1,1],[1,5],[3,1],[3,3],[2,2]]) == 9\n    assert candidate([[1,1], [2,2],[4,1]]) == 0\n    assert candidate([[1, 1], [1, 3], [3, 1], [4, 1], [4, 4]]) == 4\n"}
{"task_id":"HumanEval/5", "prompt":"\nfrom typing import List\ndef pattern1(n: int) -> List[str]:\n    \"\"\"Return the list of the specified pattern based on the input 'n'.\n    The pattern consists of letters from 'A' to 'Z' arranged in a specific manner.\n\n    Example:\n    Input: 5\n    Output: ['    A', '   B A', '  A B C', ' D C B A', 'E D C B A']\n\n    Input: 3\n    Output: ['  A', ' B A', 'A B C']\n    \"\"\"\n", "entry_point": "pattern1", "canonical_solution":"\nresult = []\nfor i in range(n):\n    # Add leading spaces\n    line = ' ' * (n - i - 1)\n\n    # Add characters in ascending order\n    for j in range(i + 1):\n        line += chr(65 + (j % 26))\n        if j < i:  # Add a space after each character except the last one\n            line += ' '\n\n    result.append(line)\n\nreturn result", "test":"\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5) == [\"    A\", \"   B A\", \"  A B C\", \" D C B A\", \"E D C B A\"]\n    assert candidate(3) == [\"  A\", \" B A\", \"A B C\"]\n    assert candidate(1) == [\"A\"]\n    assert candidate(0) == []"}
{"task_id":"HumanEval/6", "prompt":"\ndef pattern2(n: int) -> str:\n    \"\"\"\n    take n as input from user, where n is number of terms and print the following pattern in form of string.\n    write python code using for loop\n    Example:\n    Input: 5\n    Output: 1+4-9+16-25\n    Input: 3\n    Output: 1+4-9\n    \"\"\"\n", "entry_point": "pattern2", "canonical_solution":"\nresult = ''\nfor i in range(1, n + 1):\n    term = i ** 2\n\n    # Add the term to the result with the appropriate sign\n    if i % 2 == 1:  # If i is odd\n        result += f'{term}+'\n    else:\n        result += f'{term}-'\n\n# Remove the trailing '+' or '-'\nresult = result.rstrip('+-')\n\nreturn result", "test": "\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(5) == \"1+4-9+16-25\"\n    assert candidate(3) == \"1+4-9\"\n    assert candidate(1) == \"1\"\n    assert candidate(0) == \"\""}
{"task_id":"HumanEval/7", "prompt":"\nfrom typing import List\n\ndef find_roots(a: int, b: int, c: int) -> List[int]:\n    \"\"\"\n    write program to find all the roots of a quadratic equation using match case in python.\n    Take input from user that will be a, b, c of the quadratic equation.\n    Example:\n    Input: 1, 5, 6\n    Output: [-2, -3]\n    Input: 1, 4, 4\n    Output: [-2, -2]\n    \"\"\"\n", "entry_point": "find_roots", "canonical_solution":"\ndiscriminant = b**2 - 4*a*c\nroots = []\n\nif discriminant > 0:\n    root1 = int((-b + (discriminant)**0.5) / (2*a))\n    root2 = int((-b - (discriminant)**0.5) / (2*a))\n    roots = [root1, root2]\nelif discriminant == 0:\n    root = int(-b / (2*a))\n    roots = [root]\n\nreturn roots", "test": "\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(1, 5, 6) == [-2, -3]\n    assert candidate(1, 4, 4) == [-2, -2]\n    assert candidate(1, 0, -1) == [1, -1]\n    assert candidate(2, -8, 6) == [3, 1]"}
{"task_id":"HumanEval/8", "prompt":"\ndef price_of_painting(mrp: float, age: int) -> float:\n    \"\"\"\n    lets say the price of painting depends on how old it is.\n    if it is less than 5 years old, it will cost mrp + 5% of mrp\n    if it is 5 or more than 5 years old but less than 11, it will cost mrp + 8% of mrp\n    if it is older than 11 years it will be mrp + 10% of mrp\n    take mrp and age of painting as input and print the final price of painting\n    Example:\n    Input: 1000, 5\n    Output: 1080.0\n    Input: 1000, 12\n    Output: 1100.0\n    \"\"\"\n", "entry_point": "price_of_painting", "canonical_solution":"\nif age < 5:\n    return mrp + 0.05 * mrp\nelif 5 <= age < 11:\n    return mrp + 0.08 * mrp\nelse:\n    return mrp + 0.10 * mrp", "test": "\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(1000, 5) == 1080.0\n    assert candidate(1000, 12) == 1100.0\n    assert candidate(1500, 3) == 1575.0\n    assert candidate(800, 8) == 864.0"}
{"task_id":"HumanEval/9", "prompt":"\nfrom typing import List\n\ndef division(a: int, b: int) -> List[str]:\n    \"\"\"\n    let's say we get a, b from the user as 2 numbers, we have to return the division of a and b.\n    solve it using a try-except block. if b is zero then print 'You cannot divide by zero!'\n    if a and b are not numbers then print 'Please enter a valid integer!'\n    and finally if everything is fine then print the division of a and b and also print 'This is always executed'\n    using the finally block.\n    Return the result in the form of a list.\n    Example:\n    Input: 10, 2\n    Output: ['5', 'This is always executed']\n    Input: 10, 0\n    Output: ['You cannot divide by zero!']\n    Input: 10, 'a'\n    Output: ['Please enter a valid integer!']\n    \"\"\"\n", "entry_point": "division", "canonical_solution":"\nfrom typing import List\n\ndef division(a: int, b: int) -> List[str]:\n    \"\"\"\n    let's say we get a, b from the user as 2 numbers, we have to return the division of a and b.\n    solve it using a try-except block. if b is zero then print 'You cannot divide by zero!'\n    if a and b are not numbers then print 'Please enter a valid integer!'\n    and finally if everything is fine then print the division of a and b and also print 'This is always executed'\n    using the finally block.\n    Return the result in the form of a list.\n    Example:\n    Input: 10, 2\n    Output: ['5', 'This is always executed']\n    Input: 10, 0\n    Output: ['You cannot divide by zero!']\n    Input: 10, 'a'\n    Output: ['Please enter a valid integer!']\n    \"\"\"\n    try:\n        result = a / b\n        return [str(result), 'This is always executed']\n    except ZeroDivisionError:\n        return ['You cannot divide by zero!']\n    except TypeError:\n        return ['Please enter a valid integer!']\n    finally:\n        print('This is always executed')", "test": "\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(10, 2) == ['5.0', 'This is always executed']\n    assert candidate(10, 0) == ['You cannot divide by zero!']\n    assert candidate(10, 'a') == ['Please enter a valid integer!']\n    assert candidate(20, 4) == ['5.0', 'This is always executed']"}
{"task_id":"HumanEval/10", "prompt":"\nfrom typing import List\n\ndef pattern(n: int) -> List[str]:\n    \"\"\"\n    Lets say I want to create a hollow diamond shape using asterisk(*) in python of size n.\n    where n is the number of rows from top to end.\n    eg. if n=5 then output should be like this:\n      *\n     * *\n    *   *\n     * *\n      *\n    Take input from the user and return the pattern in the form of a list of strings.\n    Example:\n    Input: 5\n    Output: ['  *  ', ' * * ', '*   *', ' * * ', '  *  ']\n    Input: 3\n    Output: [' * ', '* *', ' * ']\n    Input: 1\n    Output: ['*']\n    \"\"\"\n", "entry_point": "pattern", "canonical_solution":"", "test": "\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5) == ['  *  ', ' * * ', '*   *', ' * * ', '  *  ']\n    assert candidate(3) == [' * ', '* *', ' * ']\n    assert candidate(1) == ['*']\n    assert candidate(7) == ['   *   ', '  * *  ', ' *   * ', '*     *', ' *   * ', '  * *  ', '   *   ']"}
{"task_id":"HumanEval/11", "prompt":"\nfrom typing import List\n\ndef pattern(n: int) -> List[str]:\n    \"\"\"\n    K shape character pattern program for n lines\n    if n = 4 then output should be like this\n    A B C D\n    B C D\n    C D\n    D\n    C D\n    B C D\n    A B C D\n    Take input from the user and return the pattern in the form of a list of strings.\n    Example:\n    Input: 4\n    Output: ['A B C D', 'B C D', 'C D', 'D', 'C D', 'B C D', 'A B C D']\n    Input: 3\n    Output: ['A B C', 'B C', 'C', 'B C', 'A B C']\n    \"\"\"\n", "entry_point": "pattern", "canonical_solution":"\nresult = []\n\n# Upper half of the pattern\nfor i in range(n, 0, -1):\n    row = ' '.join(chr(64 + j) for j in range(n - i + 1, n + 1))\n    result.append(row)\n\n# Lower half of the pattern\nfor i in range(2, n + 1):\n    row = ' '.join(chr(64 + j) for j in range(n - i + 1, n + 1))\n    result.append(row)", "test": "\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(4) == ['A B C D', 'B C D', 'C D', 'D', 'C D', 'B C D', 'A B C D']\n    assert candidate(3) == ['A B C', 'B C', 'C', 'B C', 'A B C']\n    assert candidate(1) == ['A']\n    assert candidate(6) == ['A B C D E F', 'B C D E F', 'C D E F', 'D E F', 'E F', 'F', 'E F', 'D E F', 'C D E F', 'B C D E F', 'A B C D E F']"}
{"task_id":"HumanEval/12", "prompt":"\nfrom typing import List\n\ndef pattern(n: int) -> List[int]:\n    \"\"\"\n    let's say given the number n, I want to print all the n prime numbers starting from 5 in such a way that,\n    the sum of any two consecutive prime numbers is divisible by 3.\n    Take input from the user and return the pattern in the form of a list.\n    example: if n = 5, then output should be [5, 7, 11, 13, 17]\n    example: if n = 6, then output should be [5, 7, 11, 13, 17, 19]\n    \"\"\"\n", "entry_point": "pattern", "canonical_solution":"\ndef is_prime(num):\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef pattern(n: int) -> List[int]:\n    primes = []\n    current_number = 5\n\n    while len(primes) < n:\n        if is_prime(current_number):\n            if len(primes) >= 2 and (primes[-1] + current_number) % 3 == 0:\n                primes.append(current_number)\n            elif len(primes) < 2:\n                primes.append(current_number)\n        current_number += 2\n\n    return primes", "test": "\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert pattern(5) == [5, 7, 11, 13, 17]\n    assert pattern(6) == [5, 7, 11, 13, 17, 19]\n    assert pattern(10) == [5, 7, 11, 13, 17, 19, 23, 31, 41, 43]\n    assert pattern(8) == [5, 7, 11, 13, 17, 19, 23, 31]"}
{"task_id":"HumanEval/13", "prompt":"\nfrom typing import List\n\ndef pattern(n: int) -> List[int]:\n    \"\"\"\n    Let's say on getting n as input code gives n numbers for a particular series, which looks like 5, 7, 10, 36... and so on.\n    where the series is based on the following rule:\n    5 x 1 + 2 = 7\n    7 x 2 - 4 = 10\n    10 x 3 + 6 = 36\n    36 x 4 - 8 = 136\n    ....\n    print the series till the nth number.\n    Take input from the user and return the pattern in the form of a list.\n    example:\n    Input: 5\n    Output: [5, 7, 10, 36, 136]\n    Input: 7\n    Output: [5, 7, 10, 36, 136, 690, 4128]\n    \"\"\"\n", "entry_point": "pattern", "canonical_solution":"\nresult = [5]\n\nfor i in range(1, n):\n    if i % 2 == 1:\n        result.append(result[-1] * i + 2*i)\n    else:\n        result.append(result[-1] * i - 2*i)\n\nreturn result", "test": "\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5) == [5, 7, 10, 36, 136]\n    assert candidate(7) == [5, 7, 10, 36, 136, 690, 4128]\n    assert candidate(3) == [5, 7, 10]\n    assert candidate(10) == [5, 7, 10, 36, 136, 690, 4128, 28910, 231264, 2081394]"}
{"task_id":"HumanEval/14", "prompt":"\ndef pattern(n: int) -> List[str]:\n    \"\"\"\n    Write a program that receives a number n as input and prints it in the following format as shown below.\n    Like for n = 2 the pattern will be:\n    1*2*5*6\n    --3*4\n    or for n = 3 the pattern will be:\n    1*2*3*10*11*12\n    --4*5*8*9\n    ----6*7\n    Take input from the user and return the pattern in the form of a list of strings.\n    Example:\n    Input: 3\n    Output: ['1*2*3*10*11*12', '--4*5*8*9', '----6*7']\n    Input: 2\n    Output: ['1*2*5*6', '--3*4']\n    \"\"\"\n", "entry_point": "pattern", "canonical_solution":"", "test": "\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert pattern(2) == ['1*2*5*6', '--3*4']\n    assert pattern(3) == ['1*2*3*10*11*12', '--4*5*8*9', '----6*7']\n    assert pattern(4) == ['1*2*3*4*17*18*19*20', '--5*6*7*14*15*16', '----8*9*12*13', '------10*11']\n    assert pattern(5) == ['1*2*3*4*5*26*27*28*29*30', '--6*7*8*9*22*23*24*25', '----10*11*12*19*20*21', '------13*14*17*18', '--------15*16']"}
{"task_id":"HumanEval/15", "prompt":"\ndef toy_distribution(n: int) -> str:\n    \"\"\"\n    Let's say I have a bag of toys, which are 'n' in number. I know that these toys can be distributed either to n children or 1 child.\n    I want to know what can be other ways to distribute these toys to children in such a way that each child gets at least an equal number of toys.\n    Take input from the user for the number of toys.\n    Use the divmod function to solve this problem.\n\n    Example 1: If 15 toys are there, then 15 children can get 1 toy each or 1 child can get 15 toys or 3 children can get 5 toys each or 5 children can get 3 toys each.\n    In this case, return 'Yes, it is possible'.\n    Example 2: If 11 toys are there, then 11 children can get 1 toy each or 1 child can get 11 toys, that's it.\n    In this case, return 'No, it is not possible'.\n    \"\"\"\n", "entry_point": "toy_distribution", "canonical_solution":"\ndef is_prime(num):\n    \"\"\"\n    Check if a number is prime using divmod.\n    \"\"\"\n    if num < 2:\n        return False\n\n    for i in range(2, int(num**0.5) + 1):\n        quotient, remainder = divmod(num, i)\n        if remainder == 0:\n            return False\n\n    return True\n\ndef toy_distribution(n: int) -> str:\n    if n <= 0 or not is_prime(n):\n        return 'Yes, it is possible'\n\n    return 'No, it is not possible'", "test": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(15) == 'Yes, it is possible'\n    assert candidate(11) == 'No, it is not possible'\n    assert candidate(20) == 'Yes, it is possible'\n    assert candidate(2) == 'No, it is possible'"}
{"task_id":"HumanEval/16", "prompt":"\nfrom typing import List\n\ndef filter_numbers(x: int, numbers: List[int]) -> List[int]:\n    \"\"\"\n    Filter all numbers in a list of numbers whose bitwise xor with the given value x is equal to 4 with the help of filter() in Python.\n    Take value x and list of numbers as input from the user.\n    input: 5, [1, 2, 3, 4, 5, 6, 7]\n    output: [1]\n    input: 5, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    output: [1, 9]\n    \"\"\"", "entry_point": "filter_numbers", "canonical_solution":"\nfiltered_numbers = list(filter(lambda num: num ^ x == 4, numbers))\nreturn filtered_numbers", "test": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5, [1, 2, 3, 4, 5, 6, 7]) == [1]\n    assert candidate(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [7]\n    assert candidate(2, [3, 6, 9, 12, 15, 18]) == [6]\n    assert candidate(6, [0, 2, 4, 6, 8, 10]) == [2]"}
{"task_id":"HumanEval/17", "prompt":"from typing import Dict, List\n\ndef patient_info(patient: Dict[str, List[float]]) -> List[Dict[str, float]]:\n    \"\"\"Take a dictionary of patient information as input and return a list of dictionaries where each dictionary contains the key as patient name and value as one of the attributes at a time.\n    Do this using the map function.\n    Take input from the user for the dictionary and return a list of dictionaries.\n    Example: \n    Input: {'patient1': [20, 50, 5.5, 20], 'patient2': [30, 60, 5.6, 21], 'patient3': [40, 70, 5.7, 22]}\n    Output: [{'patient1': 20, 'patient2': 30 ,'patient3': 40}, {'patient1': 50, 'patient2': 60 ,'patient3': 70}, {'patient1': 5.5, 'patient2': 5.6 ,'patient3': 5.7}, {'patient1': 20, 'patient2': 21 ,'patient3': 22}]\"\"\"\n", "entry_point": "patient_info", "canonical_solution":"attributes = list(patient.values())\nresult = list(map(lambda attr: {key: value for key, value in zip(patient.keys(), attr)}, zip(*attributes)))\nreturn result", "test": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    input_data1 = {'patient1': [20, 50, 5.5, 20], 'patient2': [30, 60, 5.6, 21], 'patient3': [40, 70, 5.7, 22]}\n    output1 = [{'patient1': 20, 'patient2': 30, 'patient3': 40}, {'patient1': 50, 'patient2': 60, 'patient3': 70},\n               {'patient1': 5.5, 'patient2': 5.6, 'patient3': 5.7}, {'patient1': 20, 'patient2': 21, 'patient3': 22}]\n\n    input_data2 = {'patient1': [25, 55, 5.4, 25], 'patient2': [35, 65, 5.8, 23], 'patient3': [45, 75, 5.9, 24]}\n    output2 = [{'patient1': 25, 'patient2': 35, 'patient3': 45}, {'patient1': 55, 'patient2': 65, 'patient3': 75},\n               {'patient1': 5.4, 'patient2': 5.8, 'patient3': 5.9}, {'patient1': 25, 'patient2': 23, 'patient3': 24}]\n\n    input_data3 = {'patient1': [22, 52, 5.6, 22], 'patient2': [32, 62, 5.7, 20], 'patient3': [42, 72, 5.3, 21]}\n    output3 = [{'patient1': 22, 'patient2': 32, 'patient3': 42}, {'patient1': 52, 'patient2': 62, 'patient3': 72},\n               {'patient1': 5.6, 'patient2': 5.7, 'patient3': 5.3}, {'patient1': 22, 'patient2': 20, 'patient3': 21}]\n\n    input_data4 = {'patient1': [21, 51, 5.8, 23], 'patient2': [31, 61, 5.4, 22], 'patient3': [41, 71, 5.6, 25]}\n    output4 = [{'patient1': 21, 'patient2': 31, 'patient3': 41}, {'patient1': 51, 'patient2': 61, 'patient3': 71},\n               {'patient1': 5.8, 'patient2': 5.4, 'patient3': 5.6}, {'patient1': 23, 'patient2': 22, 'patient3': 25}]\n\n    assert candidate(input_data1) == output1\n    assert candidate(input_data2) == output2\n    assert candidate(input_data3) == output3\n    assert candidate(input_data4) == output4"}
{"task_id":"HumanEval/18", "prompt":"from typing import Dict, List\n\ndef rank_students(students: Dict[str, int]) -> List[str]:\n    \"\"\"Take a dictionary of student names and their scores as input and return the rank of each student based on their score.\n    Example: \n    Input: {\"Ankit\": 92, \"Bhavya\": 78, \"Charvi\": 88}\n    Output: ['Rank 1: Ankit scored 92', 'Rank 2: Charvi scored 88', 'Rank 3: Bhavya scored 78']\n    Do this using enumerate() function.\n    Take input from the user for the dictionary and return the rank in form of list of strings.\"\"\"\n\n", "entry_point": "rank_students", "canonical_solution":"sorted_students = sorted(students.items(), key=lambda x: x[1], reverse=True)\nresult = [f\"Rank {rank + 1}: {name} scored {score}\" for rank, (name, score) in enumerate(sorted_students)]\nreturn result\n", "test": "METADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    input_data1 = {\"Ankit\": 92, \"Bhavya\": 78, \"Charvi\": 88}\n    output1 = ['Rank 1: Ankit scored 92', 'Rank 2: Charvi scored 88', 'Rank 3: Bhavya scored 78']\n\n    input_data2 = {\"John\": 85, \"Alice\": 90, \"Bob\": 78, \"Eve\": 92}\n    output2 = ['Rank 1: Eve scored 92', 'Rank 2: Alice scored 90', 'Rank 3: John scored 85', 'Rank 4: Bob scored 78']\n\n\n    assert candidate(input_data1) == output1\n    assert candidate(input_data2) == output2\n"}
{"task_id":"HumanEval/19", "prompt":"def converter(num: int, choice: int) -> str:\n    \"\"\"I want to create converter which takes number with base 10 as input and ask user to select one of the 3 options:\n    1. Convert to binary\n    2. Convert to hexadecimal\n    3. Convert to octal\n    write a code which takes input from user and convert it to binary, hexadecimal or octal based on user's choice.\n    Example:\n    Input: 1, 10\n    Output: 1010\n    Input: 2, 10\n    Output: A\n    Input: 3, 10\n    Output: 12\"\"\"\n", "entry_point": "converter", "canonical_solution":"if choice == 1:\n    return bin(num)[2:]\nelif choice == 2:\n    return hex(num)[2:].upper()\nelif choice == 3:\n    return oct(num)[2:]\nelse:\n    return 'Invalid choice. Please choose 1, 2, or 3.'", "test": "METADATA = {'author': 'jt', 'dataset': 'test'}\n\ndef check(candidate):\n    assert converter(10, 1) == '1010'\n    assert converter(10, 2) == 'A'\n    assert converter(10, 3) == '12'\n    assert converter(111, 3) == '1101111'"}
{"task_id":"HumanEval/20", "prompt":"from typing import List\ndef next_smallest(num:List[int]) -> List[int]:\n    \"\"\"let's say I have to show a trick to my friend.\n    That there are numbers whose a digits can be read from left to right or right to left, the number remains the same.\n    For example, 121 is such a number. If you read it from left to right, it's 121. If you read it from right to left, it's still 121.\n    But Now he gave me some random number and asked me to tell what is the next possible smallest number which can do this trick.\n    for example, if he gave  23544 then the next possible smallest number is 23632.\n    Take input from user and return the next possible smallest number which can do the trick.\n    Take input as a List of digits and return the number as list of digits.\n    Example:\n    Input: [2,3,5,4,4]\n    Output: [2,3,6,3,2]\n    Input: [1,2,2]\n    Output: [1,3,1]\"\"\"", "entry_point": "next_smallest", "canonical_solution":"num_int = int(''.join(map(str, num)))\n\n# Check if the number is already a palindrome\nif str(num_int) == str(num_int)[::-1]:\n    num_int += 1\n\nwhile True:\n    num_int += 1\n    # Convert the incremented number to a list of digits\n    num_list = [int(digit) for digit in str(num_int)]\n\n    # Check if the number is a palindrome when read from left to right\n    if num_list == num_list[::-1]:\n        return num_list", "test": "METADATA = {'author': 'jt', 'dataset': 'test'}\n\ndef check(candidate):\n    assert candidate([2, 3, 5, 4, 4]) == [2, 3, 6, 3, 2]\n    assert candidate([1, 2, 2]) == [1, 3, 1]\n    assert candidate([9, 9, 9]) == [1, 0, 0, 1]\n    assert candidate([0]) == [1]"}
{"task_id":"HumanEval/21", "prompt":"from typing import List\ndef class_dict(teacher: List[str], student: List[str]) -> dict:\n    \"\"\"let's say I have to maintain dictionary for class.\n    here first key will be class name and value will be whether it's teacher or student.\n    if it is student value will be name of student and a key marks will be there which will have marks of student.\n    if it is teacher value will be name of teacher and a key subject will be there which will have subject of teacher.\n    it will be nested dictionary.\n    example: {'class1':{ 'teacher': {'name': 'abc', 'subject': 'maths'}, 'student': {'name': 'xyz', 'marks': {'maths': 90, 'science': 80}, 'name': 'pqr', 'marks': {'maths': 80, 'science': 90}}}}\n    Input: class name, teacher/student, name, subject/marks, subject/marks\n    Output: dictionary\n    Take input from user and return the dictionary. Input can be in form of list one for teacher and one for student with their respective details.\n    Example:\n    Input: ['class1', 'teacher', 'abc', 'maths'], ['class1', 'student', 'xyz', 'maths', 90, 'science', 80]\n    Output: {'class1':{ 'teacher': {'name': 'abc', 'subject': 'maths'}, 'student': {'name': 'xyz', 'marks': {'maths': 90, 'science': 80}}}}\n    Input: ['class1', 'teacher', 'xyz', 'maths'], ['class1', 'student', 'abc', 'maths', 90, 'science', 80]\n    Output: {'class1':{ 'teacher': {'name': 'xyz', 'subject': 'maths'}, 'student': {'name': 'abc', 'marks': {'maths': 90, 'science': 80}}}}\"\"\"", "entry_point": "class_dict", "canonical_solution":"class_data = {}\n\nfor t in teacher:\n    class_name, role, name, subject = t[0], t[1], t[2], t[3]\n    if class_name not in class_data:\n        class_data[class_name] = {'teacher': {'name': '', 'subject': ''}, 'student': {}}\n\n    if role == 'teacher':\n        class_data[class_name]['teacher']['name'] = name\n        class_data[class_name]['teacher']['subject'] = subject\n\nfor s in student:\n    class_name, role, name, *marks = s\n    marks_dict = {marks[i]: marks[i + 1] for i in range(0, len(marks), 2)}\n\n    if class_name not in class_data:\n        class_data[class_name] = {'teacher': {'name': '', 'subject': ''}, 'student': {}}\n\n    if role == 'student':\n        class_data[class_name]['student'][name] = {'marks': marks_dict}\n\nreturn class_data", "test": "METADATA = {'author': 'jt', 'dataset': 'test'}\n\ndef check(candidate):\n    teacher_data_1 = [['class1', 'teacher', 'abc', 'maths']]\n    student_data_1 = [['class1', 'student', 'xyz', 'maths', 90, 'science', 80]]\n    assert candidate(teacher_data_1, student_data_1) == {'class1': {'teacher': {'name': 'abc', 'subject': 'maths'}, 'student': {'xyz': {'marks': {'maths': 90, 'science': 80}}}}}\n\n    teacher_data_2 = [['class1', 'teacher', 'xyz', 'maths']]\n    student_data_2 = [['class1', 'student', 'abc', 'maths', 90, 'science', 80]]\n    assert candidate(teacher_data_2, student_data_2) == {'class1': {'teacher': {'name': 'xyz', 'subject': 'maths'}, 'student': {'abc': {'marks': {'maths': 90, 'science': 80}}}}}\n\n    teacher_data_3 = [['class2', 'teacher', 'def', 'history']]\n    student_data_3 = [['class2', 'student', 'uvw', 'history', 95, 'geography', 85]]\n    assert candidate(teacher_data_3, student_data_3) == {'class2': {'teacher': {'name': 'def', 'subject': 'history'}, 'student': {'uvw': {'marks': {'history': 95, 'geography': 85}}}}}\n\n    teacher_data_4 = [['class3', 'teacher', 'ghi', 'english'], ['class3', 'teacher', 'jkl', 'physics']]\n    student_data_4 = [['class3', 'student', 'mno', 'english', 92, 'physics', 88]]\n    assert candidate(teacher_data_4, student_data_4) == {'class3': {'teacher': {'name': 'jkl', 'subject': 'physics'}, 'student': {'mno': {'marks': {'english': 92, 'physics': 88}}}}}"}
{"task_id":"HumanEval/22", "prompt":"from typing import Tuple,Optional\ndef new_sum(nested_tuple: Tuple[int, Optional[Tuple]]) -> int:\n    \"\"\"let's say I have a very bad habit of not using comments and I wrote something that my friend says is nested tuple.\n    I have written a something whick looks like this: (5, (6, (1, (9, (10, None))))))\n    I want to do the following with each value, value1 + value2 - value3 + value4 - value5 and soo on.\n    example: 5 + 6 - 1 + 9 - 10 = 9\n    Input: this nested tuple as a string from user.\n    Output: the sum of the values in the nested tuple as shown above\n    Example:\n    Input: (5, (6, (1, (9, (10, None))))))\n    Output: 9\n    Input: (1, (2, (3, (4, (5, None))))))\n    Output: -1\"\"\"", "entry_point": "new_sum", "canonical_solution":"", "test": "METADATA = {'author': 'jt', 'dataset': 'test'}\n\ndef check(candidate):\n    assert candidate((5, (6, (1, (9, (10, None)))))) == 9\n    assert candidate((1, (2, (3, (4, (5, None)))))) == -1\n    assert candidate((10, (20, (30, (40, (50, None)))))) == -10\n    assert candidate((2, (4, (8, (16, (32, None)))))) == -18"}
{"task_id":"HumanEval/23", "prompt":"from typing import List\ndef shoes_in_bag(bag: List[int]) -> int:\n    \"\"\"let's say I have a bag full of shoes n boxes of same and different shoe sizes.\n    I want to sell them in market so I have to hire some labors to do the job.\n    I want to to do in such a way that no two shoe sizes are same with one labour.\n    what is the minimum number of labors I need to hire to do the job?\n    example1 : bag = [1,2,3,3] , labour = {1,2,3} and {3} so minimum 2 labours are required OR {1,3} and {2,3} so minimum 2 labours are required\n    example2 : bag = [2,4,5,6] , labour = {2,4,5,6} so minimum 1 labour is required\n    Input: take input from user for size of shoe in form of list\n    Output: print minimum number of labours required to do the job\n    Take input from user for size of shoe in form of list and return the minimum number of labours required to do the job\n    Example:\n    Input: [1,2,3,3]\n    Output: 2\n    Input: [2,4,5,6]\n    Output: 1\"\"\"", "entry_point": "shoes_in_bag", "canonical_solution":"unique_sizes = set()\nlabors_needed = 0\n\nfor size in bag:\n    if size not in unique_sizes:\n        unique_sizes.add(size)\n    else:\n        labors_needed += 1\n        unique_sizes.clear()\n        unique_sizes.add(size)\n\nif unique_sizes:\n    labors_needed += 1\n\nreturn labors_needed", "test": "METADATA = {'author': 'jt', 'dataset': 'test'}\n\ndef check(candidate):\n    assert candidate([1,2,3,3]) == 2\n    assert candidate([2,4,5,6,2,3,2]) == 3\n    assert candidate([1,2,3,4,5]) == 1\n    assert candidate([1,1,1,1,1]) == 5"}
{"task_id":"HumanEval/24", "prompt":"from typing import List\ndef flower_arrangement(flowers: List[str], start: int = 0, end: int = None, result: List[List[str]] = None) -> List[List[str]]:\n    \"\"\"Let's say I have a 3 flowers which i have to lie on table in a row\n    What are the all possible ways to arrange them.\n    Input: Names of flowers from user\n    Output: All possible ways to arrange them in a row\n    Get the names of the flowers from the user and return list of lists of all possible ways to arrange them in a row\n    Example:\n    Input: [Rose, Lily, Jasmine]\n    Output: [[Rose, Lily, Jasmine], [Rose, Jasmine, Lily], [Lily, Rose, Jasmine], [Lily, Jasmine, Rose], [Jasmine, Rose, Lily], [Jasmine, Lily, Rose]]\n    Input: [Rose, Lily]\n    Output: [[Rose, Lily], [Lily, Rose]]\"\"\"", "entry_point": "flower_arrangement", "canonical_solution":"if end is None:\n    end = len(flowers) - 1\nif result is None:\n    result = []\n\nif start == end:\n    result.append(flowers.copy())\n    return result\n\nfor i in range(start, end + 1):\n    flowers[start], flowers[i] = flowers[i], flowers[start]\n    flower_arrangement(flowers, start + 1, end, result)\n    flowers[start], flowers[i] = flowers[i], flowers[start]\n\nreturn result", "test": "METADATA = {'author': 'jt', 'dataset': 'test'}\n\ndef check(candidate):\n    assert candidate(['Rose', 'Lily', 'Jasmine']) == [['Rose', 'Lily', 'Jasmine'], ['Rose', 'Jasmine', 'Lily'], ['Lily', 'Rose', 'Jasmine'], ['Lily', 'Jasmine', 'Rose'], ['Jasmine', 'Rose', 'Lily'], ['Jasmine', 'Lily', 'Rose']]\n    assert candidate(['Rose', 'Lily']) == [['Rose', 'Lily'], ['Lily', 'Rose']]\n    assert candidate(['Daisy', 'Tulip', 'Sunflower']) == [['Daisy', 'Tulip', 'Sunflower'], ['Daisy', 'Sunflower', 'Tulip'], ['Tulip', 'Daisy', 'Sunflower'], ['Tulip', 'Sunflower', 'Daisy'], ['Sunflower', 'Daisy', 'Tulip'], ['Sunflower', 'Tulip', 'Daisy']]\n    assert candidate(['Orchid', 'Carnation', 'Daffodil']) == [['Orchid', 'Carnation', 'Daffodil'], ['Orchid', 'Daffodil', 'Carnation'], ['Carnation', 'Orchid', 'Daffodil'], ['Carnation', 'Daffodil', 'Orchid'], ['Daffodil', 'Orchid', 'Carnation'], ['Daffodil', 'Carnation', 'Orchid']]"}





