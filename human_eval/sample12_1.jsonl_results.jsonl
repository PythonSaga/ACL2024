{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\ndef extra_marks(marks:List[float])-> float:\n    \"\"\"let say i have a list of marks scored in each question by person. I want a sum of all the extra marks he/she scored in exam,\n    extra score is whatever he scored above 100 in each question.\n    but if marks is below 0 in any question it would reduce the total extra scores.\n    for example: if marks scored in each question of exam is [100, 120, -30, 140, -50, -60, 170, 22,55,-20] , \n    extra scores would be 20-30+40-50-60+70-20= -30\"\"\"\n    sum_extra = 0\n    for mark in marks:\n        if mark >= 0:\n            if mark > 100:\n                sum_extra += mark - 100\n        else:\n            sum_extra -= mark\n    return sum_extra\n\n#test marks\n#marks = [100, 120, -30, 140, -50, -60, 170, 22,55,-20]\n#print(extra_marks(marks))\n\n#test marks\nmarks = [80, 120, 150, 140, -50, -60, 170, 22,55,-20]\nprint(extra_marks(marks))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\ndef extra_marks(marks:List[float])-> float:\n    \"\"\"let say i have a list of marks scored in each question by person. I want a sum of all the extra marks he/she scored in exam,\n    extra score is whatever he scored above 100 in each question.\n    but if marks is below 0 in any question it would reduce the total extra scores.\n    for example: if marks scored in each question of exam is [100, 120, -30, 140, -50, -60, 170, 22,55,-20] , \n    extra scores would be 20-30+40-50-60+70-20= -30\"\"\"\n    total_extra_score = 0\n    for mark in marks:\n        if mark > 100:\n            total_extra_score += mark-100\n        elif mark <0:\n            total_extra_score -= mark\n    return total_extra_score\n\n\ndef average_marks(marks:List[float])-> float:\n    \"\"\"calculating average marks of a person\"\"\"\n    average = sum(marks)/len(marks)\n    return average\n\n\ndef main():\n    marks = [100, 120, -30, 140, -50, -60, 170, 22,55,-20]\n    print(\"Extra marks:\",extra_marks(marks))\n    print(\"Average marks:\",average_marks(marks))\n\n\nif __name__ == '__main__':\n    main()", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\ndef extra_marks(marks:List[float])-> float:\n    \"\"\"let say i have a list of marks scored in each question by person. I want a sum of all the extra marks he/she scored in exam,\n    extra score is whatever he scored above 100 in each question.\n    but if marks is below 0 in any question it would reduce the total extra scores.\n    for example: if marks scored in each question of exam is [100, 120, -30, 140, -50, -60, 170, 22,55,-20] , \n    extra scores would be 20-30+40-50-60+70-20= -30\"\"\"\n    extra_score = 0\n    for mark in marks:\n        if mark > 100:\n            extra_score += mark - 100\n        elif mark < 0:\n            extra_score -= mark\n    return extra_score\n\nmarks = [100, 120, -30, 140, -50, -60, 170, 22,55,-20]\nprint(extra_marks(marks))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\ndef extra_marks(marks:List[float])-> float:\n    \"\"\"let say i have a list of marks scored in each question by person. I want a sum of all the extra marks he/she scored in exam,\n    extra score is whatever he scored above 100 in each question.\n    but if marks is below 0 in any question it would reduce the total extra scores.\n    for example: if marks scored in each question of exam is [100, 120, -30, 140, -50, -60, 170, 22,55,-20] , \n    extra scores would be 20-30+40-50-60+70-20= -30\"\"\"\n    extra_scores=0\n    for i in range(len(marks)):\n        if marks[i] > 100:\n            extra_scores += marks[i]-100\n        elif marks[i]<0:\n            extra_scores-=marks[i]\n    return extra_scores\n\nmarks=[100, 120, -30, 140, -50, -60, 170, 22,55,-20]\nprint(extra_marks(marks))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\ndef extra_marks(marks:List[float])-> float:\n    \"\"\"let say i have a list of marks scored in each question by person. I want a sum of all the extra marks he/she scored in exam,\n    extra score is whatever he scored above 100 in each question.\n    but if marks is below 0 in any question it would reduce the total extra scores.\n    for example: if marks scored in each question of exam is [100, 120, -30, 140, -50, -60, 170, 22,55,-20] , \n    extra scores would be 20-30+40-50-60+70-20= -30\"\"\"\n    extra_score=0\n    for i in range(len(marks)):\n        if marks[i]>100:\n            extra_score=extra_score+marks[i]-100\n        elif marks[i]<0:\n            extra_score=extra_score-marks[i]\n    return extra_score\n\n\ndef calculate_score(marks:List[float], extra_marks:float)-> float:\n    \"\"\"calculate score of person given marks and extra marks\"\"\"\n    total_score=0\n    for i in range(len(marks)):\n        total_score=total_score+marks[i]+extra_marks\n    return total_score\n\n\ndef calculate_percentage(marks:List[float], total_score:float)-> float:\n    \"\"\"calculate percentage of person given marks and total score\"\"\"\n    percentage=0\n    for i in range(len(marks)):\n        percentage=percentage+marks[i", "result": "failed: invalid syntax (<string>, line 43)", "passed": false}
{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\ndef extra_marks(marks:List[float])-> float:\n    \"\"\"let say i have a list of marks scored in each question by person. I want a sum of all the extra marks he/she scored in exam,\n    extra score is whatever he scored above 100 in each question.\n    but if marks is below 0 in any question it would reduce the total extra scores.\n    for example: if marks scored in each question of exam is [100, 120, -30, 140, -50, -60, 170, 22,55,-20] , \n    extra scores would be 20-30+40-50-60+70-20= -30\"\"\"\n    extra_score=0\n    for mark in marks:\n        if mark>100:\n            extra_score+= mark-100\n        elif mark<0:\n            extra_score-= mark\n    return extra_score\n\n\nmarks=[100, 120, -30, 140, -50, -60, 170, 22,55,-20]\nprint(extra_marks(marks))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\ndef extra_marks(marks:List[float])-> float:\n    \"\"\"let say i have a list of marks scored in each question by person. I want a sum of all the extra marks he/she scored in exam,\n    extra score is whatever he scored above 100 in each question.\n    but if marks is below 0 in any question it would reduce the total extra scores.\n    for example: if marks scored in each question of exam is [100, 120, -30, 140, -50, -60, 170, 22,55,-20] , \n    extra scores would be 20-30+40-50-60+70-20= -30\"\"\"\n    extra_score = sum([marks[i]-100 if marks[i]<0 else marks[i] for i in range(len(marks))])\n    return extra_score\n\nmarks=[100, 120, -30, 140, -50, -60, 170, 22,55,-20]\nprint(extra_marks(marks))\n\n\n# 3.2\n\ndef extra_marks2(marks:List[float])-> float:\n    \"\"\"let say i have a list of marks scored in each question by person. I want a sum of all the extra marks he/she scored in exam,\n    extra score is whatever he scored above 100 in each question.\n    but if marks is below 0 in any question it would reduce the total extra scores.\n    for example: if marks scored in each question of exam is [100, 120,", "result": "failed: EOF while scanning triple-quoted string literal (<string>, line 47)", "passed": false}
{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\ndef extra_marks(marks:List[float])-> float:\n    \"\"\"let say i have a list of marks scored in each question by person. I want a sum of all the extra marks he/she scored in exam,\n    extra score is whatever he scored above 100 in each question.\n    but if marks is below 0 in any question it would reduce the total extra scores.\n    for example: if marks scored in each question of exam is [100, 120, -30, 140, -50, -60, 170, 22,55,-20] , \n    extra scores would be 20-30+40-50-60+70-20= -30\"\"\"\n    extra_marks=0\n    for mark in marks:\n        if mark > 100:\n            extra_marks += mark - 100\n        elif mark < 0:\n            extra_marks += mark\n    return extra_marks\n\ndef main():\n    marks=[100, 120, -30, 140, -50, -60, 170, 22,55,-20]\n    print(\"extra marks:\", extra_marks(marks))\n\nif __name__ == \"__main__\":\n    main()", "result": "passed", "passed": true}
{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\ndef extra_marks(marks:List[float])-> float:\n    \"\"\"let say i have a list of marks scored in each question by person. I want a sum of all the extra marks he/she scored in exam,\n    extra score is whatever he scored above 100 in each question.\n    but if marks is below 0 in any question it would reduce the total extra scores.\n    for example: if marks scored in each question of exam is [100, 120, -30, 140, -50, -60, 170, 22,55,-20] , \n    extra scores would be 20-30+40-50-60+70-20= -30\"\"\"\n    total_extra = 0\n    for mark in marks:\n        if mark > 100:\n            total_extra += mark - 100\n        else:\n            total_extra -= mark\n    return total_extra\n\n\n#test example\nmarks = [-30, 120, -30, 140, -50, -60, 170, 22, 55, -20]\nprint(extra_marks(marks))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\ndef extra_marks(marks:List[float])-> float:\n    \"\"\"let say i have a list of marks scored in each question by person. I want a sum of all the extra marks he/she scored in exam,\n    extra score is whatever he scored above 100 in each question.\n    but if marks is below 0 in any question it would reduce the total extra scores.\n    for example: if marks scored in each question of exam is [100, 120, -30, 140, -50, -60, 170, 22,55,-20] , \n    extra scores would be 20-30+40-50-60+70-20= -30\"\"\"\n    extra_scores = []\n    total_extra_scores = 0\n    for mark in marks:\n        if mark > 100:\n            extra_scores.append(mark - 100)\n            total_extra_scores += mark - 100\n        elif mark < 0:\n            extra_scores.append(0)\n    return sum(extra_scores) - total_extra_scores", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\ndef extra_marks(marks:List[float])-> float:\n    \"\"\"let say i have a list of marks scored in each question by person. I want a sum of all the extra marks he/she scored in exam,\n    extra score is whatever he scored above 100 in each question.\n    but if marks is below 0 in any question it would reduce the total extra scores.\n    for example: if marks scored in each question of exam is [100, 120, -30, 140, -50, -60, 170, 22,55,-20] , \n    extra scores would be 20-30+40-50-60+70-20= -30\"\"\"\n    sum_of_extra_marks = sum([max(0, mark - 100) for mark in marks])\n    return sum_of_extra_marks", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\ndef extra_marks(marks:List[float])-> float:\n    \"\"\"let say i have a list of marks scored in each question by person. I want a sum of all the extra marks he/she scored in exam,\n    extra score is whatever he scored above 100 in each question.\n    but if marks is below 0 in any question it would reduce the total extra scores.\n    for example: if marks scored in each question of exam is [100, 120, -30, 140, -50, -60, 170, 22,55,-20] , \n    extra scores would be 20-30+40-50-60+70-20= -30\"\"\"\n    extra_marks = 0\n    for mark in marks:\n        if mark > 100:\n            extra_marks += mark - 100\n        else:\n            extra_marks -= mark\n    return extra_marks\n\nmarks = [100, 120, -30, 140, -50, -60, 170, 22,55,-20]\nprint(extra_marks(marks))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\ndef extra_marks(marks:List[float])-> float:\n    \"\"\"let say i have a list of marks scored in each question by person. I want a sum of all the extra marks he/she scored in exam,\n    extra score is whatever he scored above 100 in each question.\n    but if marks is below 0 in any question it would reduce the total extra scores.\n    for example: if marks scored in each question of exam is [100, 120, -30, 140, -50, -60, 170, 22,55,-20] , \n    extra scores would be 20-30+40-50-60+70-20= -30\"\"\"\n    extra = 0\n    for mark in marks:\n        if mark>100:\n            extra+= mark -100\n        else:\n            extra-= mark\n    return extra", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\ndef extra_marks(marks:List[float])-> float:\n    \"\"\"let say i have a list of marks scored in each question by person. I want a sum of all the extra marks he/she scored in exam,\n    extra score is whatever he scored above 100 in each question.\n    but if marks is below 0 in any question it would reduce the total extra scores.\n    for example: if marks scored in each question of exam is [100, 120, -30, 140, -50, -60, 170, 22,55,-20] , \n    extra scores would be 20-30+40-50-60+70-20= -30\"\"\"\n    total_extra = 0\n    for mark in marks:\n        if mark > 100:\n            total_extra += mark - 100\n        elif mark < 0:\n            total_extra -= mark\n    return total_extra\n\ndef sum_marks(marks:List[float])-> float:\n    \"\"\"it just gives sum of all the marks\"\"\"\n    return sum(marks)\n\ndef sum_marks_and_extra_marks(marks:List[float])-> float:\n    \"\"\"it gives sum of all the marks and sum of extra marks\"\"\"\n    return sum_marks(marks) + extra_marks(marks)\n\n\ndef main():\n    marks = [100, 120, -30, 140, -50, -60, 170, 22,55,-20]\n    print(sum_marks(marks))\n    print(extra_marks(", "result": "failed: invalid syntax (<string>, line 48)", "passed": false}
{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\ndef extra_marks(marks:List[float])-> float:\n    \"\"\"let say i have a list of marks scored in each question by person. I want a sum of all the extra marks he/she scored in exam,\n    extra score is whatever he scored above 100 in each question.\n    but if marks is below 0 in any question it would reduce the total extra scores.\n    for example: if marks scored in each question of exam is [100, 120, -30, 140, -50, -60, 170, 22,55,-20] , \n    extra scores would be 20-30+40-50-60+70-20= -30\"\"\"\n    extra_marks=0\n    for mark in marks:\n        if mark >100:\n            extra_marks += mark -100\n        else:\n            extra_marks += mark\n    return extra_marks\n\n# example\nmarks=[-30,120, -30, 140, -50, -60, 170, 22,55,-20]\nprint(extra_marks(marks))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\ndef extra_marks(marks:List[float])-> float:\n    \"\"\"let say i have a list of marks scored in each question by person. I want a sum of all the extra marks he/she scored in exam,\n    extra score is whatever he scored above 100 in each question.\n    but if marks is below 0 in any question it would reduce the total extra scores.\n    for example: if marks scored in each question of exam is [100, 120, -30, 140, -50, -60, 170, 22,55,-20] , \n    extra scores would be 20-30+40-50-60+70-20= -30\"\"\"\n    extra_scores = 0\n    for mark in marks:\n        if mark>100:\n            extra_scores += mark - 100\n        elif mark < 0:\n            extra_scores -= mark\n    return extra_scores\n\ndef main():\n    marks = [100, 120, -30, 140, -50, -60, 170, 22,55,-20]\n    print(extra_marks(marks))\n\nif __name__ == \"__main__\":\n    main()", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\ndef extra_marks(marks:List[float])-> float:\n    \"\"\"let say i have a list of marks scored in each question by person. I want a sum of all the extra marks he/she scored in exam,\n    extra score is whatever he scored above 100 in each question.\n    but if marks is below 0 in any question it would reduce the total extra scores.\n    for example: if marks scored in each question of exam is [100, 120, -30, 140, -50, -60, 170, 22,55,-20] , \n    extra scores would be 20-30+40-50-60+70-20= -30\"\"\"\n    total_marks = sum(marks)\n    if total_marks < 0 :\n        return -total_marks\n    else:\n        extra_scores = 0\n        for mark in marks:\n            if mark > 100:\n                extra_scores += mark - 100\n            else:\n                extra_scores += 0\n        return extra_scores", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\ndef extra_marks(marks:List[float])-> float:\n    \"\"\"let say i have a list of marks scored in each question by person. I want a sum of all the extra marks he/she scored in exam,\n    extra score is whatever he scored above 100 in each question.\n    but if marks is below 0 in any question it would reduce the total extra scores.\n    for example: if marks scored in each question of exam is [100, 120, -30, 140, -50, -60, 170, 22,55,-20] , \n    extra scores would be 20-30+40-50-60+70-20= -30\"\"\"\n    extra_scores = []\n    for mark in marks:\n        if mark > 100:\n            extra_scores.append(mark - 100)\n        elif mark >= 0:\n            extra_scores.append(0)\n        else:\n            extra_scores.append(mark)\n    return sum(extra_scores)\n\nmarks = [100, 120, -30, 140, -50, -60, 170, 22,55,-20]\nprint(extra_marks(marks))", "result": "passed", "passed": true}
{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\ndef extra_marks(marks:List[float])-> float:\n    \"\"\"let say i have a list of marks scored in each question by person. I want a sum of all the extra marks he/she scored in exam,\n    extra score is whatever he scored above 100 in each question.\n    but if marks is below 0 in any question it would reduce the total extra scores.\n    for example: if marks scored in each question of exam is [100, 120, -30, 140, -50, -60, 170, 22,55,-20] , \n    extra scores would be 20-30+40-50-60+70-20= -30\"\"\"\n    extra_scores = 0\n    for mark in marks:\n        if mark > 100:\n            extra_scores += mark - 100\n        elif mark < 0:\n            extra_scores -= mark\n    return extra_scores\n\n# test the function\nmarks = [100, 120, -30, 140, -50, -60, 170, 22,55,-20]\nprint(extra_marks(marks))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\ndef extra_marks(marks:List[float])-> float:\n    \"\"\"let say i have a list of marks scored in each question by person. I want a sum of all the extra marks he/she scored in exam,\n    extra score is whatever he scored above 100 in each question.\n    but if marks is below 0 in any question it would reduce the total extra scores.\n    for example: if marks scored in each question of exam is [100, 120, -30, 140, -50, -60, 170, 22,55,-20] , \n    extra scores would be 20-30+40-50-60+70-20= -30\"\"\"\n    extra_scores = []\n    for mark in marks:\n        if mark > 100:\n            extra_scores.append(mark-100)\n        elif mark < 0:\n            extra_scores.append(0)\n    return sum(extra_scores)", "result": "failed: ", "passed": false}
